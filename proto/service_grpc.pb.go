// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetFileServiceClient is the client API for GetFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetFileServiceClient interface {
	GetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Request, error)
	UploadFile(ctx context.Context, in *FileResponse, opts ...grpc.CallOption) (*Message, error)
}

type getFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetFileServiceClient(cc grpc.ClientConnInterface) GetFileServiceClient {
	return &getFileServiceClient{cc}
}

func (c *getFileServiceClient) GetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/proto.GetFileService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getFileServiceClient) UploadFile(ctx context.Context, in *FileResponse, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.GetFileService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetFileServiceServer is the server API for GetFileService service.
// All implementations must embed UnimplementedGetFileServiceServer
// for forward compatibility
type GetFileServiceServer interface {
	GetFile(context.Context, *Message) (*Request, error)
	UploadFile(context.Context, *FileResponse) (*Message, error)
	mustEmbedUnimplementedGetFileServiceServer()
}

// UnimplementedGetFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetFileServiceServer struct {
}

func (UnimplementedGetFileServiceServer) GetFile(context.Context, *Message) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedGetFileServiceServer) UploadFile(context.Context, *FileResponse) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedGetFileServiceServer) mustEmbedUnimplementedGetFileServiceServer() {}

// UnsafeGetFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetFileServiceServer will
// result in compilation errors.
type UnsafeGetFileServiceServer interface {
	mustEmbedUnimplementedGetFileServiceServer()
}

func RegisterGetFileServiceServer(s grpc.ServiceRegistrar, srv GetFileServiceServer) {
	s.RegisterService(&GetFileService_ServiceDesc, srv)
}

func _GetFileService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetFileServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetFileService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetFileServiceServer).GetFile(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetFileService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetFileServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetFileService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetFileServiceServer).UploadFile(ctx, req.(*FileResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// GetFileService_ServiceDesc is the grpc.ServiceDesc for GetFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetFileService",
	HandlerType: (*GetFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _GetFileService_GetFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _GetFileService_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
